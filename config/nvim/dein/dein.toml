###
# fuzzy-finder
###


# telescope.nvimが依存
[[plugins]]
repo = 'nvim-lua/plenary.nvim'


[[plugins]]
depends = ['airblade/vim-rooter']
hook_add = '''
" Search for Project root
" Find files using Telescope command-line sugar.
nnoremap <C-p> <cmd>Telescope find_files<cr>
nnoremap <C-g> <cmd>Telescope live_grep<cr>
" プロジェクトルートではなく現在開いているファイルを起点にファイル検索
nnoremap <M-p> <cmd>lua require('telescope.builtin').find_files( { cwd = vim.fn.expand('%:p:h') })<cr>
nnoremap <M-g> <cmd>lua require('telescope.builtin').live_grep( { cwd = vim.fn.expand('%:p:h') })<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
lua <<EOF
require('telescope').setup{
  defaults = {
    mappings = {
      n = {
        ["<esc>"] = require('telescope.actions').close,
      },
      i = {
        ["<esc>"] = require('telescope.actions').close,
        ["<C-a>"] = require('telescope.actions').send_to_qflist + require('telescope.actions').open_qflist,
        ["<C-q>"] = require('telescope.actions').send_selected_to_qflist + require('telescope.actions').open_qflist
      }
    }
  }
}
EOF
'''
repo = 'nvim-telescope/telescope.nvim'

# telescope-frequencyが依存
[[plugins]]
repo = 'tami5/sqlite.lua'

# telescope-frequencyが依存
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
hook_add = '''
nnoremap <C-f> <cmd>Telescope frecency<cr>
lua << EOF
require"telescope".load_extension("frecency")
EOF
'''
repo = 'nvim-telescope/telescope-frecency.nvim'


[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-path'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
[[plugins]]
hook_add = '''
lua <<EOF
require('cmp').setup{
  snippet = {
    expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
        end,
    },
    window = {
    },
    mapping = require('cmp').mapping.preset.insert{
      ['<C-b>'] = require('cmp').mapping.scroll_docs(-4),
      ['<C-f>'] = require('cmp').mapping.scroll_docs(4),
      ['<C-Space>'] = require('cmp').mapping.complete(),
      ['<C-e>'] = require('cmp').mapping.abort(),
      ['<CR>'] = require('cmp').mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    },
    sources = require('cmp').config.sources{
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    }
  }
  -- To use git you need to install the plugin petertriho/cmp-git and uncomment lines below
  -- Set configuration for specific filetype.
  --[[ require('cmp').setup.filetype('gitcommit', {
    sources = require('cmp').config.sources({
      { name = 'git' },
    }, {
      { name = 'buffer' },
    })
 })
 require("cmp_git").setup() ]]-- 

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  require('cmp').setup.cmdline({ '/', '?' }, {
    mapping = require('cmp').mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  require('cmp').setup.cmdline(':', {
    mapping = require('cmp').mapping.preset.cmdline(),
    sources = require('cmp').config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    }),
    matching = { disallow_symbol_nonprefix_matching = false }
  })

  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig').clangd.setup {
    capabilities = capabilities
  }
  require'lspconfig'.pylsp.setup{}
EOF
'''
repo = 'hrsh7th/nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
